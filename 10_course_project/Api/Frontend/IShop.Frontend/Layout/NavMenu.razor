@using Microsoft.AspNetCore.Components.Authorization
@using IShop.Frontend.Services
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">IShop.Frontend</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/auth/login">
                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/auth/register">
                <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        @* <AuthorizeView> *@
        @*     <Authorized> *@
        @*         <div class="nav-item px-3"> *@
        @*             <div class="nav-link text-light"> *@
        @*                 <span class="bi bi-person-fill" aria-hidden="true"></span> @context.User.Identity?.Name *@
        @*             </div> *@
        @*         </div> *@
        @*         <div class="nav-item px-3"> *@
        @*             <button class="nav-link btn btn-link" @onclick="Logout"> *@
        @*                 <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout *@
        @*             </button> *@
        @*         </div> *@
        @*     </Authorized> *@
        @* </AuthorizeView> *@
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
        {
            customProvider.NotifyAuthenticationStateChanged();
        }
    }
}
