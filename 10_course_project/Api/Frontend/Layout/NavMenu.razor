@using Microsoft.AspNetCore.Components.Authorization
@using IShop.Frontend.Services
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <i class="fas fa-shop me-2"></i> Ларёк</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/auth/login" ActiveClass="active">
                        <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/auth/register" ActiveClass="active">
                        <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/catalog" ActiveClass="active">
                        <span class="bi bi-list-ul" aria-hidden="true"></span> Каталог
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/cart" ActiveClass="active">
                        <span class="bi bi-cart" aria-hidden="true"></span> Корзина
                        @if (cartItemsCount > 0)
                        {
                            <span class="badge rounded-full">@cartItemsCount</span>
                        }
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/orders" ActiveClass="active">
                        <span class="bi bi-list-check" aria-hidden="true"></span> Заказы
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <button class="nav-link btn btn-link" @onclick="Logout">
                        <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Выйти
                    </button>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>
<div class="fixed-bottom p-3 offset-0">
    <NavLink class="nav-link text-light" 
        href="https://github.com/bampo/otus_dz/tree/main/10_course_project/" target="_blank">
        <span class="bi bi-info-circle me-3"></span> О проекте
    </NavLink>
</div>

@code {
    private bool collapseNavMenu = true;
    private int cartItemsCount;
    private System.Threading.Timer? refreshTimer;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected async override Task OnInitializedAsync()
    {
        CartService.CartUpdated += OnCartUpdated;
        await LoadCartCount();
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await LoadCartCount();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private async void OnCartUpdated(object sender, EventArgs e)
    {
        await LoadCartCount();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadCartCount()
    {
        try
        {
            var items = await CartService.GetCartItemsAsync();
            cartItemsCount = items.Sum(i => i.Quantity);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cartItemsCount", cartItemsCount.ToString());
        }
        catch
        {
            cartItemsCount = int.Parse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cartItemsCount") ?? "0");
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        if (AuthenticationStateProvider is CustomAuthStateProvider customProvider)
        {
            customProvider.NotifyAuthenticationStateChanged();
        }
        NavigationManager.NavigateTo("auth/login");
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
